#!/bin/bash
#PBS -l nodes=1:ppn=16,walltime=4:00:00
#PBS -l vmem=31gb
#PBS -N tractoflow
#PBS -V

set -e  # Stop on error

# === USER CONFIGURATION ===
SUBJECT_ID="S1"
INPUT_ROOT="data/input"
OUTPUT_ROOT="data/output"
MINICONDA_VERSION="latest"
INSTALL_DIR="$HOME/miniconda3"
CONDA_ENV_NAME="tractoflow"
NEXTFLOW_VERSION="21.10.6"
SCIL_IMAGE="scilus_1.6.0.sif"
TRACTOFLOW_REPO="tractoflow"

# === INPUT PARSING ===
dwi=$(jq -r '.dwi' config.json)
bvals=$(jq -r '.bvals' config.json)
bvecs=$(jq -r '.bvecs' config.json)
t1w=$(jq -r '.t1' config.json)

# === CREATE INPUT STRUCTURE ===
mkdir -p $INPUT_ROOT/$SUBJECT_ID
cp "$dwi"   $INPUT_ROOT/$SUBJECT_ID/dwi.nii.gz
cp "$bvals" $INPUT_ROOT/$SUBJECT_ID/bval
cp "$bvecs" $INPUT_ROOT/$SUBJECT_ID/bvec
cp "$t1w"   $INPUT_ROOT/$SUBJECT_ID/t1.nii.gz

# === PREP OUTPUT STRUCTURE ===
mkdir -p $OUTPUT_ROOT Resample_DWI Resample_T1 PFT_Tracking

# === INSTALL MINICONDA (IF NEEDED) ===
if [ ! -d "$INSTALL_DIR" ]; then
    echo "Installing Miniconda..."
    INSTALLER="Miniconda3-$MINICONDA_VERSION-Linux-x86_64.sh"
    wget -O miniconda.sh "https://repo.anaconda.com/miniconda/$INSTALLER"
    bash miniconda.sh -b -p "$INSTALL_DIR"
    rm miniconda.sh
fi

# === LOAD CONDA INTO SHELL ===
source "$INSTALL_DIR/etc/profile.d/conda.sh"

# === ACCEPT TOS FOR CONDA CHANNELS ===
if conda help | grep -q "tos"; then
    echo "Accepting Conda ToS..."
    conda tos accept --override-channels --channel https://repo.anaconda.com/pkgs/main
    conda tos accept --override-channels --channel https://repo.anaconda.com/pkgs/r
else
    echo "Skipping ToS acceptance: 'conda tos' not supported in this build."
fi



# === CREATE ENV (IF NEEDED) ===
if ! conda env list | grep -q "$CONDA_ENV_NAME"; then
    echo "Creating Conda environment: $CONDA_ENV_NAME"
    conda create -n "$CONDA_ENV_NAME" -y
    conda activate "$CONDA_ENV_NAME"
    conda install -y -c bioconda nextflow="$NEXTFLOW_VERSION"
else
    conda activate "$CONDA_ENV_NAME"
fi

# === EXPORT BIN PATH JUST IN CASE ===
export PATH="$INSTALL_DIR/envs/$CONDA_ENV_NAME/bin:$PATH"

# === PULL SINGULARITY IMAGE (IF NEEDED) ===
if [ ! -f "$SCIL_IMAGE" ]; then
    echo "Pulling Singularity image: $SCIL_IMAGE"
    singularity pull --name "$SCIL_IMAGE" docker://scilus/scilus:1.6.0
fi

# === CLONE TRACTOFLOW REPO (IF NEEDED) ===
if [ ! -d "$TRACTOFLOW_REPO" ]; then
    echo "Cloning TractoFlow..."
    git clone https://github.com/scilus/tractoflow.git "$TRACTOFLOW_REPO"
fi

# === RUN TRACTOFLOW ===
cd "$TRACTOFLOW_REPO"

# Fix the runOptions to use a safe home dir
sed -i 's|singularity\.runOptions *=.*|singularity.runOptions = "--home ${baseDir}"|' nextflow.config


echo "Running TractoFlow..."
export APPTAINERENV_TMPDIR=/tmp
export NXF_SINGULARITY_RUNOPTIONS="--home $(pwd)"
nextflow run ./main.nf \
    --input ../$INPUT_ROOT \
    -with-singularity ../$SCIL_IMAGE \
    --output_dir ../$OUTPUT_ROOT \
    --processes 16 

# === COPY KEY OUTPUTS ===
cp ../$OUTPUT_ROOT/Resample_DWI/*__dwi_resampled.nii.gz ../Resample_DWI/dwi.nii.gz
cp ../$OUTPUT_ROOT/Extract_FODF_Shell/*__bval_fodf ../Resample_DWI/dwi.bvals
cp ../$OUTPUT_ROOT/Extract_FODF_Shell/*__bvec_fodf ../Resample_DWI/dwi.bvecs
cp ../$OUTPUT_ROOT/Resample_T1/*__t1_resampled.nii.gz ../Resample_T1/t1.nii.gz
cp ../$OUTPUT_ROOT/PFT_Tracking/*__pft_tracking_prob_wm_seed_0.trk ../PFT_Tracking/track.trk

echo "âœ… TractoFlow pipeline completed successfully."
